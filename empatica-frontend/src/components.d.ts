/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Validation,
  ValidationError,
} from './utils/validator';
import {
  RouterHistory,
} from '@stencil/router';

export namespace Components {
  interface EmpApp {}
  interface EmpArticleMolecule {
    'productImage': string;
  }
  interface EmpButtonMolecule {
    'center': boolean;
    'disabled': boolean;
    'full': boolean;
    'kind': string & 'primary' | 'gray';
  }
  interface EmpFooterMolecule {}
  interface EmpIMolecule {
    'hover': boolean;
    'icon': string;
    'pointer': boolean;
  }
  interface EmpInputMolecule {
    'errors': Validation[];
    'icon': string;
    'iid': string;
    'label': string;
    'type': string & 'text' | 'password' | 'email';
    'value': string;
  }
  interface EmpListItemMolecule {
    'centeredTitle': boolean;
    'iconLeft': string;
    'iconRight': string;
    'text': string;
  }
  interface EmpProfileMolecule {
    'email': string;
    'name': string;
    'profileImage': string;
    'surname': string;
  }
  interface EmpSpinnerMolecule {}
  interface HomePage {
    'history': RouterHistory;
  }
  interface LoginPage {
    'history': RouterHistory;
    'sectionTitle': string;
  }
  interface ProfilePage {
    'history': RouterHistory;
  }
}

declare global {


  interface HTMLEmpAppElement extends Components.EmpApp, HTMLStencilElement {}
  var HTMLEmpAppElement: {
    prototype: HTMLEmpAppElement;
    new (): HTMLEmpAppElement;
  };

  interface HTMLEmpArticleMoleculeElement extends Components.EmpArticleMolecule, HTMLStencilElement {}
  var HTMLEmpArticleMoleculeElement: {
    prototype: HTMLEmpArticleMoleculeElement;
    new (): HTMLEmpArticleMoleculeElement;
  };

  interface HTMLEmpButtonMoleculeElement extends Components.EmpButtonMolecule, HTMLStencilElement {}
  var HTMLEmpButtonMoleculeElement: {
    prototype: HTMLEmpButtonMoleculeElement;
    new (): HTMLEmpButtonMoleculeElement;
  };

  interface HTMLEmpFooterMoleculeElement extends Components.EmpFooterMolecule, HTMLStencilElement {}
  var HTMLEmpFooterMoleculeElement: {
    prototype: HTMLEmpFooterMoleculeElement;
    new (): HTMLEmpFooterMoleculeElement;
  };

  interface HTMLEmpIMoleculeElement extends Components.EmpIMolecule, HTMLStencilElement {}
  var HTMLEmpIMoleculeElement: {
    prototype: HTMLEmpIMoleculeElement;
    new (): HTMLEmpIMoleculeElement;
  };

  interface HTMLEmpInputMoleculeElement extends Components.EmpInputMolecule, HTMLStencilElement {}
  var HTMLEmpInputMoleculeElement: {
    prototype: HTMLEmpInputMoleculeElement;
    new (): HTMLEmpInputMoleculeElement;
  };

  interface HTMLEmpListItemMoleculeElement extends Components.EmpListItemMolecule, HTMLStencilElement {}
  var HTMLEmpListItemMoleculeElement: {
    prototype: HTMLEmpListItemMoleculeElement;
    new (): HTMLEmpListItemMoleculeElement;
  };

  interface HTMLEmpProfileMoleculeElement extends Components.EmpProfileMolecule, HTMLStencilElement {}
  var HTMLEmpProfileMoleculeElement: {
    prototype: HTMLEmpProfileMoleculeElement;
    new (): HTMLEmpProfileMoleculeElement;
  };

  interface HTMLEmpSpinnerMoleculeElement extends Components.EmpSpinnerMolecule, HTMLStencilElement {}
  var HTMLEmpSpinnerMoleculeElement: {
    prototype: HTMLEmpSpinnerMoleculeElement;
    new (): HTMLEmpSpinnerMoleculeElement;
  };

  interface HTMLHomePageElement extends Components.HomePage, HTMLStencilElement {}
  var HTMLHomePageElement: {
    prototype: HTMLHomePageElement;
    new (): HTMLHomePageElement;
  };

  interface HTMLLoginPageElement extends Components.LoginPage, HTMLStencilElement {}
  var HTMLLoginPageElement: {
    prototype: HTMLLoginPageElement;
    new (): HTMLLoginPageElement;
  };

  interface HTMLProfilePageElement extends Components.ProfilePage, HTMLStencilElement {}
  var HTMLProfilePageElement: {
    prototype: HTMLProfilePageElement;
    new (): HTMLProfilePageElement;
  };
  interface HTMLElementTagNameMap {
    'emp-app': HTMLEmpAppElement;
    'emp-article-molecule': HTMLEmpArticleMoleculeElement;
    'emp-button-molecule': HTMLEmpButtonMoleculeElement;
    'emp-footer-molecule': HTMLEmpFooterMoleculeElement;
    'emp-i-molecule': HTMLEmpIMoleculeElement;
    'emp-input-molecule': HTMLEmpInputMoleculeElement;
    'emp-list-item-molecule': HTMLEmpListItemMoleculeElement;
    'emp-profile-molecule': HTMLEmpProfileMoleculeElement;
    'emp-spinner-molecule': HTMLEmpSpinnerMoleculeElement;
    'home-page': HTMLHomePageElement;
    'login-page': HTMLLoginPageElement;
    'profile-page': HTMLProfilePageElement;
  }
}

declare namespace LocalJSX {
  interface EmpApp {}
  interface EmpArticleMolecule {
    'onImageClick'?: (event: CustomEvent<void>) => void;
    'productImage'?: string;
  }
  interface EmpButtonMolecule {
    'center'?: boolean;
    'disabled'?: boolean;
    'full'?: boolean;
    'kind'?: string & 'primary' | 'gray';
  }
  interface EmpFooterMolecule {}
  interface EmpIMolecule {
    'hover'?: boolean;
    'icon'?: string;
    'pointer'?: boolean;
  }
  interface EmpInputMolecule {
    'errors'?: Validation[];
    'icon'?: string;
    'iid'?: string;
    'label'?: string;
    'onEmpblur'?: (event: CustomEvent<{ value: string; valid: boolean; errors?: ValidationError }>) => void;
    'onEmpchange'?: (event: CustomEvent<{ value: string; valid: boolean; errors?: ValidationError }>) => void;
    'onEmpfocus'?: (event: CustomEvent<{ value: string; valid: boolean; errors?: ValidationError }>) => void;
    'onEmpicon'?: (event: CustomEvent<{ value: string; valid: boolean; errors?: ValidationError }>) => void;
    'onEmpkeyUp'?: (event: CustomEvent<{ value: string; valid: boolean; errors?: ValidationError }>) => void;
    'type'?: string & 'text' | 'password' | 'email';
    'value'?: string;
  }
  interface EmpListItemMolecule {
    'centeredTitle'?: boolean;
    'iconLeft'?: string;
    'iconRight'?: string;
    'text'?: string;
  }
  interface EmpProfileMolecule {
    'email'?: string;
    'name'?: string;
    'profileImage'?: string;
    'surname'?: string;
  }
  interface EmpSpinnerMolecule {}
  interface HomePage {
    'history'?: RouterHistory;
  }
  interface LoginPage {
    'history'?: RouterHistory;
    'sectionTitle'?: string;
  }
  interface ProfilePage {
    'history'?: RouterHistory;
  }

  interface IntrinsicElements {
    'emp-app': EmpApp;
    'emp-article-molecule': EmpArticleMolecule;
    'emp-button-molecule': EmpButtonMolecule;
    'emp-footer-molecule': EmpFooterMolecule;
    'emp-i-molecule': EmpIMolecule;
    'emp-input-molecule': EmpInputMolecule;
    'emp-list-item-molecule': EmpListItemMolecule;
    'emp-profile-molecule': EmpProfileMolecule;
    'emp-spinner-molecule': EmpSpinnerMolecule;
    'home-page': HomePage;
    'login-page': LoginPage;
    'profile-page': ProfilePage;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'emp-app': LocalJSX.EmpApp & JSXBase.HTMLAttributes<HTMLEmpAppElement>;
      'emp-article-molecule': LocalJSX.EmpArticleMolecule & JSXBase.HTMLAttributes<HTMLEmpArticleMoleculeElement>;
      'emp-button-molecule': LocalJSX.EmpButtonMolecule & JSXBase.HTMLAttributes<HTMLEmpButtonMoleculeElement>;
      'emp-footer-molecule': LocalJSX.EmpFooterMolecule & JSXBase.HTMLAttributes<HTMLEmpFooterMoleculeElement>;
      'emp-i-molecule': LocalJSX.EmpIMolecule & JSXBase.HTMLAttributes<HTMLEmpIMoleculeElement>;
      'emp-input-molecule': LocalJSX.EmpInputMolecule & JSXBase.HTMLAttributes<HTMLEmpInputMoleculeElement>;
      'emp-list-item-molecule': LocalJSX.EmpListItemMolecule & JSXBase.HTMLAttributes<HTMLEmpListItemMoleculeElement>;
      'emp-profile-molecule': LocalJSX.EmpProfileMolecule & JSXBase.HTMLAttributes<HTMLEmpProfileMoleculeElement>;
      'emp-spinner-molecule': LocalJSX.EmpSpinnerMolecule & JSXBase.HTMLAttributes<HTMLEmpSpinnerMoleculeElement>;
      'home-page': LocalJSX.HomePage & JSXBase.HTMLAttributes<HTMLHomePageElement>;
      'login-page': LocalJSX.LoginPage & JSXBase.HTMLAttributes<HTMLLoginPageElement>;
      'profile-page': LocalJSX.ProfilePage & JSXBase.HTMLAttributes<HTMLProfilePageElement>;
    }
  }
}


